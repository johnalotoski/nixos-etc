
  # Block device structure as seen with `lsblk -f`
  #
  # SSD > mdadm RAID1 > LUKS > LVM
  # HDD > LUKS
  #
  # ---------------------------------------------------------------------------------------------
  #
  # NAME              FSTYPE            LABEL   UUID                                   MOUNTPOINT
  # sda
  # ├─sda1            vfat              boot1   41B8-8A40                              /boot
  # └─sda2            linux_raid_member nixos:0 c5cb0286-a9a9-2645-2a35-4d88941aa36d
  #   └─md0           crypto_LUKS               a8b83540-8db1-4612-b75b-901718b34c5e
  #     └─cr0         LVM2_member               OWGXF9-gE0m-D1qQ-z24K-quWY-KgSH-lfM2fd
  #       ├─vg0-nixos ext4              nixos   0f234721-a60f-4d05-bed5-3b5c8080cdb6   /
  #       └─vg0-swap  swap              swap    c8041681-4662-47a5-9ef8-0a1bc66a8bba   [SWAP]
  # sdb               crypto_LUKS               5a321a3f-11b9-45b5-90e7-d1ebf12700d4
  # └─cr1             ext4              data    e73802de-ec82-4c5a-bdba-0df1d41f0fd2   /data
  # sdc
  # ├─sdc1            vfat              boot2   44D0-0CCE
  # └─sdc2            linux_raid_member nixos:0 c5cb0286-a9a9-2645-2a35-4d88941aa36d
  #   └─md0           crypto_LUKS               a8b83540-8db1-4612-b75b-901718b34c5e
  #     └─cr0         LVM2_member               OWGXF9-gE0m-D1qQ-z24K-quWY-KgSH-lfM2fd
  #       ├─vg0-nixos ext4              nixos   0f234721-a60f-4d05-bed5-3b5c8080cdb6   /
  #       └─vg0-swap  swap              swap    c8041681-4662-47a5-9ef8-0a1bc66a8bba   [SWAP]
  # sr0
  #
  # ---------------------------------------------------------------------------------------------
  #
  #
  # This setup was deployed on an EFI booting Thinkpad P71 using the following NixOS
  # installation method. On this system the identical SSDs are recognized as /dev/sda and
  # /dev/sdc and the HDD as sdb.
  #
  #
  # Setup of the SSDs used the following gdisk parameters (repeat the same for sdc):
  #
  #   gdisk /dev/sda
  #     n (new partition)
  #     1 (default part number)
  #     2048 (default first sector)
  #     +512M (size)
  #     t (change partition type)
  #     1 (partition number)
  #     ef00 (Linux EFI system)
  #     n (new)
  #     2 (default new partition)
  #     <enter> (default new first sector)
  #     <enter> (default last sector)
  #     t (change partition type)
  #     2 (partition number)
  #     8300 (Linux FS)
  #     w (write changes and exit)
  #
  # Device /dev/sdb, the HDD, will have LUKS added directly to the block device,
  # so partitioning with fdisk or gdisk won't be done here.
  #
  #
  # Create the SSD RAID 1 (Mirrored) Array:
  #
  #   mdadm --create --verbose /dev/md0 --level=1 --raid-devices=2 /dev/sda2 /dev/sdc2
  #
  #
  # Status checks during RAID creation can be done with something similar to the following.
  # On 1 TB, creation took ~1 hr for the initial creation to complete and about 0.3% of the
  # write life warranty.  Here total bytes were 512 bytes/sector * num_logical_sectors.
  #
  #   smartctl -a /dev/sda; smartctl -l devstat,0 /dev/sda
  #   smartctl -a /dev/sdc; smartctl -l devstat,0 /dev/sdc
  #   mdadm --detail /dev/md0
  #
  #
  # Obtain the mdadm config line for use later in this configuration.nix file using:
  #
  #   mdadm --detail --scan
  #
  #
  # Create LUKS encryption with passphrase only (will require 1 passphrase entry for
  # each encrypted device).  Here we are encrypting the RAID array and the data drive.
  # Command options can be modified as desired.
  #
  #   cryptsetup -v --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random --verify-passphrase /dev/md0
  #   cryptsetup -v --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random --verify-passphrase /dev/sdb
  #
  #
  # Open the crypted volumes and name them cr0 and cr1 for crypt0 and 1 respectively:
  #
  #   cryptsetup luksOpen /dev/md0 cr0
  #   cryptsetup luksOpen /dev/sdb cr1
  #
  #
  # Create LVM on cr0, sectioning up the volume as desired:
  #
  #   pvcreate /dev/mapper/cr0
  #   vgcreate vg0 /dev/mapper/cr0
  #   lvcreate -L 900G -n nixos vg0
  #   lvcreate -l 100%FREE -n swap vg0
  #
  #
  # Create filesystems on boot, root, swap and data partitions:
  #
  #   mkfs.fat -F 32 -n boot1 /dev/sda1
  #   mkfs.fat -F 32 -n boot2 /dev/sdc1
  #   mkfs.ext4 -L nixos /dev/mapper/vg0-nixos
  #   mkfs.ext4 -L data /dev/mapper/cr1
  #   mkswap -L swap /dev/mapper/vg0-swap
  #
  #
  # Prep the installation:
  #
  #   mount /dev/disk/by-label/nixos /mnt
  #   mkdir -p /mnt/boot
  #   mount /dev/disk/by-label/boot1 /mnt/boot
  #   swapon /dev/disk/by-label/swap
  #   nixos-generate-config --root /mnt
  #
  #
  # Configure the .nix files as needed, using github nix files as a template if desired:
  #
  #   vi /mnt/etc/nixos/configuration.nix
  #   vi /mnt/etc/nixos/hardware-configuration.nix
  #
  #
  # Install NixOS:
  #
  #   nixos-install
  #   reboot
  #
  #
  # Post boot, for high DPI monitors, the following command can enlarge the font:
  #   Ref: https://wiki.archlinux.org/index.php/HiDPI#Linux_console
  #   Ref: https://gist.github.com/domenkozar/b3c945035af53fa816e0ac460f1df853
  #
  #   setfont latarcyrheb-sun32
  #
  #
  # Upon booting into NixOS, reboot persistent WiFi with Network Manager can be added:
  #
  #   nmcli con add con-name <con-name> ifname <if> type wifi ssid <ssid>
  #   nmcli con modify <con-name> wifi-sec.key-mgmt wpa-psk
  #   nmcli con modify <con-name> wifi-sec.psk <password>
  #   nmcli con modify <con-name> connection.autoconnect-priority <number, ex: 10>
  #   nmcli -f autoconnect-priority,name c
  #
  #
  # A LUKS password will be required on boot for both devices.  One way to enable a single
  # LUKS password to unlock both devices is to use a LUKS image key.  The following is
  # one way to do this and the resulting image key is used in the nix config below.
  #
  # Inspiration for this method was from:
  #   https://gist.github.com/CMCDragonkai/6456d974982e09d4fe71f339f9029bd3
  #   https://github.com/NixOS/nixpkgs/issues/24386
  #
  # To create a LUKS image file of about 4 MB, containing about 2 MB of random key data,
  # the following setup was used:
  #
  #   dd if=/dev/zero of=/boot/lk0.img bs=1024 count=0 seek=4096
  #   cryptsetup -v --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random --verify-passphrase luksFormat /boot/lk0.img
  #   cryptsetup luksOpen /boot/lk0.img 0lk
  #   dd if=/dev/urandom of=/dev/mapper/0lk
  #   cryptsetup luksAddKey /dev/md0 /dev/mapper/0lk
  #   cryptsetup luksAddKey /dev/sdb /dev/mapper/0lk
  #   cryptsetup luksClose 0lk
  #   pushd /boot
  #   cpio --create --format=newc <<< "lk0.img" | gzip > ./lk0.img.cpio.gz
  #   popd

  # Hack to allow degraded array to boot per https://github.com/NixOS/nixpkgs/issues/31840
  # This may not work in this config since the command is run after LUKS attempts decryption
  # at which point RAID already needs to be mounted.
  #
  # boot.initrd.preLVMCommands = "mdadm --run /dev/md127";

